create database eshopping;

use  eshopping;

show tables;

create table user(emailid varchar(30) primary key, password varchar(30) not null, typeofuser enum('customer','admin','manager'));

insert into user values('admin@gmail.com','admin@123','admin');
insert into user values('manager1@gmail.com','manager1@123','manager');
insert into user values('manager2@gmail.com','manager2@123','manager');
insert into user values('steven@gmail.com','steven@123','customer');
insert into user values('leena@gmail.com','leena@123','customer');

try to insert more customer details 

select * from user;


create table product(pid int primary key, 
				pname varchar(50) not null, 
				price float, 
				description text,
				stock int, 
				created_at timestamp default current_timestamp);

desc product;

insert into product(pid,pname,price,description,stock) values(100,'Laptop',999.99,'High performance with 32 gb ram',50);
insert into product(pid,pname,price,description,stock) values(101,'Smartphone',340.99,'Fitness tracker over ear phone',25);
insert into product(pid,pname,price,description,stock) values(102,'Webcam',45.99,'HD Web cam',10);
insert into product(pid,pname,price,description,stock) values(103,'Pen Drive',49.99,'16 gb Memory',100);
insert into product(pid,pname,price,description,stock) values(104,'Tablet',199.99,'10-inch tablet with full HD display',15);

in product table insert few more records 

select * from product;

create table orders(oid int primary key auto_increment, 
			      uid varchar(30), 
			      order_date timestamp default current_timestamp,
			      total float, 
			      status Enum('Pending','Shipped','Delivered','Cancelled') default 'Pending',
			      foreign key(uid) references user(emailid));
				
desc orders;

insert into orders(uid,total) values('steven@gmail.com',350);
insert into orders(uid,total) values('steven@gmail.com',450);
insert into orders(uid,total) values('leena@gmail.com',140);
insert into orders(uid,total) values(null,100);
insert into orders(uid,total,status) values('leena@gmail.com',100,'Delivered');	


insert few more orders details. 


update orders set status='Shipped' where oid=1;			we can change the status 

create table orderitem(oitemid int primary key auto_increment, 
				   oid int, 
				   pid int, 
	                           qty int, 
                                   amount int, 
				   foreign key(oid) references orders(oid),
			           foreign key(pid) references product(pid));

desc orderitem;					to check table structure 
	
insert into orderitem(oid,pid,qty,amount) values(1,100,2,999.99);
insert into orderitem(oid,pid,qty,amount) values(1,101,5,340.99);
insert into orderitem(oid,pid,qty,amount) values(2,104,5,199.99);

insert few more orderitem base upon products 


select * from orderitem;				to check all records present in table. 


create table accounts(accno int primary key, 
				userid varchar(30), 
				uname varchar(30) not null, 
				balance float,  
				foreign key(userid) references user(emailid));

desc accounts;

insert into accounts values(110011,'steven@gmail.com','steven',250);
insert into accounts values(110012,'leena@gmail.com','leena',210);
insert into accounts values(110013,null,'John',290);


select * from accounts;

create table payment(pid int primary key auto_increment, 
				oid int, 
				paymentdate timestamp default current_timestamp, 
				amount float,  
				paymentmethod enum('Credit Card','Paypal','Net Banking','Bank Transfer'), 
				foreign key(oid) references orders(oid));

desc payment 

insert into payment(oid,amount,paymentmethod) values(1,250,'Paypal');
insert into payment(oid,amount,paymentmethod) values(2,350,'Credit Card');
insert into payment(oid,amount,paymentmethod) values(3,180,'Net Banking');

insert few more payment details. 



inner join with user and account table 

select emailid,typeofuser,accno,balance from user inner join accounts on emailid=userid;


if table contains common column name ie PK in one table and FK in another table then we need to use table alias 

select p.pid,p.pname,p.description,ot.qty from product p inner join orderitem ot on p.pid=ot.pid;

here p is table alias for product and ot is table alias for orderitem table.  



------------------------------------------------------

select * from user;

select * from account;


select emailid,typeofuser,accno,balance from user inner join accounts on emailid=userid;

select emailid,typeofuser,accno,balance from user left outer join accounts on emailid=userid;

select emailid,typeofuser,accno,balance from user right outer join accounts on emailid=userid;


	
select * from product 

select * from orderitem 

select p.pname,p.price,ot.oid,ot.amount from product p inner join orderitem ot on p.pid=ot.pid;

select p.pname,p.price,ot.oid,ot.amount from product p left outer join orderitem ot on p.pid=ot.pid;

select p.pname,p.price,ot.oid,ot.amount from product p right outer join orderitem ot on p.pid=ot.pid;



function 


select upper('akash');

select lower('AKASH');


select count(pid) as total_record from product;

select sum(price) as total_price, max(price) as max_price, min(price) as min_price, avg(price) as avg from product;

select sum(price*stock) as total_price, max(price) as max_price, min(price) as min_price, avg(price) as avg from product;


all order total

select sum(total) from orders;		

sub group total by uid 

select uid,sum(total) from orders group by uid;	


sub group by status 

select status,count(oid) from orders group by status;


group by using paymentmethod 

select paymentmethod,sum(amount) total_amount,count(pid) total_transaction from payment group by paymentmethod;



order by clause 

Lower to higher base upon price 

select * from product order by price asc;

higher to lower base upon price 

select * from product order by price desc;


Transaction successfully executed. 

start transaction
update accounts set balance= balance-100 where accno=110011;
update accounts set balance= balance+100 where accno=110012;
select * from accounts;
commit;

Transaction failure. 

start transaction
update accounts set balance= balance-50 where accno=110011;
update accounts set balance= balance+50 where accno=110015;
select * from accounts;
rollback;
